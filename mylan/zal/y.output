Grammar

    0 $accept: script $end

    1 script: func_def_or_state
    2       | script func_def_or_state

    3 func_def_or_state: func_def
    4                  | state

    5 func_def: FUNCTION IDENTIFIER LP para_list RP block
    6         | FUNCTION IDENTIFIER LP RP block

    7 state: expr SEMICOLON
    8      | if_state
    9      | for_state
   10      | while_state
   11      | return_state
   12      | break_state
   13      | continue_state

   14 para_list: IDENTIFIER
   15          | para_list COMMA IDENTIFIER

   16 block: LC state_list RC
   17      | LC RC

   18 expr_list: %empty
   19          | expr
   20          | expr_list COMMA expr

   21 if_state: IF LP condition RP block
   22         | IF LP condition RP block elif
   23         | IF LP condition RP block ELSE block
   24         | IF LP condition RP block elif ELSE block

   25 for_state: FOR LP expr SEMICOLON condition SEMICOLON expr RP block

   26 while_state: WHILE LP condition RP block

   27 return_state: RETURN expr SEMICOLON

   28 break_state: BREAK SEMICOLON

   29 continue_state: CONTINUE SEMICOLON

   30 state_list: state
   31           | state_list state

   32 expr: l_expr ASSIGN expr
   33     | logical_or_expr

   34 condition: expr
   35          | expr_list COMMA expr

   36 elif: ELIF LP condition RP block
   37     | elif ELIF LP condition RP block

   38 l_expr: IDENTIFIER
   39       | l_expr LB expr RB

   40 logical_or_expr: logical_and_expr
   41                | logical_or_expr LOGIC_OR logical_and_expr

   42 logical_and_expr: eq_ne_expr
   43                 | logical_and_expr LOGIC_AND eq_ne_expr

   44 eq_ne_expr: compare_expr
   45           | eq_ne_expr EQ compare_expr
   46           | eq_ne_expr NE compare_expr

   47 compare_expr: add_sub_expr
   48             | compare_expr GT add_sub_expr
   49             | compare_expr GE add_sub_expr
   50             | compare_expr LT add_sub_expr
   51             | compare_expr LE add_sub_expr

   52 add_sub_expr: math_expr
   53             | add_sub_expr ADD math_expr
   54             | add_sub_expr SUB math_expr

   55 math_expr: minus_expr
   56          | math_expr MUL minus_expr
   57          | math_expr DIV minus_expr
   58          | math_expr MOD minus_expr

   59 minus_expr: in_de_expr
   60           | SUB pri_expr

   61 in_de_expr: pri_expr
   62           | pri_expr INC
   63           | pri_expr DEC

   64 pri_expr: INT_LITERAL
   65         | DOUBLE_LITERAL
   66         | STRING_LITERAL
   67         | array_literal
   68         | IDENTIFIER LP argv_list RP
   69         | IDENTIFIER LP RP
   70         | l_expr DOT IDENTIFIER LP argv_list RP
   71         | l_expr DOT IDENTIFIER LP RP
   72         | LP expr RP
   73         | IDENTIFIER
   74         | NULL_T
   75         | TRUE_T
   76         | FALSE_T

   77 array_literal: LC expr_list RC
   78              | LC expr_list COMMA RC

   79 argv_list: expr
   80          | argv_list COMMA expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INT_LITERAL <expr> (258) 64
    DOUBLE_LITERAL <expr> (259) 65
    STRING_LITERAL <expr> (260) 66
    IDENTIFIER <identifier> (261) 5 6 14 15 38 68 69 70 71 73
    FUNCTION (262) 5 6
    IF (263) 21 22 23 24
    ELIF (264) 36 37
    ELSE (265) 23 24
    WHILE (266) 26
    FOR (267) 25
    RETURN (268) 27
    CONTINUE (269) 29
    BREAK (270) 28
    NULL_T (271) 74
    TRUE_T (272) 75
    FALSE_T (273) 76
    LP (274) 5 6 21 22 23 24 25 26 36 37 68 69 70 71 72
    RP (275) 5 6 21 22 23 24 25 26 36 37 68 69 70 71 72
    LC (276) 16 17 77 78
    RC (277) 16 17 77 78
    LB (278) 39
    RB (279) 39
    SEMICOLON (280) 7 25 27 28 29
    COMMA (281) 15 20 35 78 80
    LOGIC_AND (282) 43
    LOGIC_OR (283) 41
    ASSIGN (284) 32
    EQ (285) 45
    NE (286) 46
    GE (287) 49
    LE (288) 51
    GT (289) 48
    LT (290) 50
    ADD (291) 53
    SUB (292) 54 60
    MUL (293) 56
    DIV (294) 57
    MOD (295) 58
    INC (296) 62
    DEC (297) 63
    DOT (298) 70 71


Nonterminals, with rules where they appear

    $accept (44)
        on left: 0
    script (45)
        on left: 1 2
        on right: 0 2
    func_def_or_state (46)
        on left: 3 4
        on right: 1 2
    func_def (47)
        on left: 5 6
        on right: 3
    state <state> (48)
        on left: 7 8 9 10 11 12 13
        on right: 4 30 31
    para_list <para_list> (49)
        on left: 14 15
        on right: 5 15
    block <block> (50)
        on left: 16 17
        on right: 5 6 21 22 23 24 25 26 36 37
    expr_list <expr_list> (51)
        on left: 18 19 20
        on right: 20 35 77 78
    if_state <state> (52)
        on left: 21 22 23 24
        on right: 8
    for_state <state> (53)
        on left: 25
        on right: 9
    while_state <state> (54)
        on left: 26
        on right: 10
    return_state <state> (55)
        on left: 27
        on right: 11
    break_state <state> (56)
        on left: 28
        on right: 12
    continue_state <state> (57)
        on left: 29
        on right: 13
    state_list <state_list> (58)
        on left: 30 31
        on right: 16 31
    expr <expr> (59)
        on left: 32 33
        on right: 7 19 20 25 27 32 34 35 39 72 79 80
    condition <expr> (60)
        on left: 34 35
        on right: 21 22 23 24 25 26 36 37
    elif <elif> (61)
        on left: 36 37
        on right: 22 24 37
    l_expr <expr> (62)
        on left: 38 39
        on right: 32 39 70 71
    logical_or_expr <expr> (63)
        on left: 40 41
        on right: 33 41
    logical_and_expr <expr> (64)
        on left: 42 43
        on right: 40 41 43
    eq_ne_expr <expr> (65)
        on left: 44 45 46
        on right: 42 43 45 46
    compare_expr <expr> (66)
        on left: 47 48 49 50 51
        on right: 44 45 46 48 49 50 51
    add_sub_expr <expr> (67)
        on left: 52 53 54
        on right: 47 48 49 50 51 53 54
    math_expr <expr> (68)
        on left: 55 56 57 58
        on right: 52 53 54 56 57 58
    minus_expr <expr> (69)
        on left: 59 60
        on right: 55 56 57 58
    in_de_expr <expr> (70)
        on left: 61 62 63
        on right: 59
    pri_expr <expr> (71)
        on left: 64 65 66 67 68 69 70 71 72 73 74 75 76
        on right: 60 61 62 63
    array_literal <expr> (72)
        on left: 77 78
        on right: 67
    argv_list <argv_list> (73)
        on left: 79 80
        on right: 68 70 80


State 0

    0 $accept: . script $end

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    FUNCTION        shift, and go to state 5
    IF              shift, and go to state 6
    WHILE           shift, and go to state 7
    FOR             shift, and go to state 8
    RETURN          shift, and go to state 9
    CONTINUE        shift, and go to state 10
    BREAK           shift, and go to state 11
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    script             go to state 18
    func_def_or_state  go to state 19
    func_def           go to state 20
    state              go to state 21
    if_state           go to state 22
    for_state          go to state 23
    while_state        go to state 24
    return_state       go to state 25
    break_state        go to state 26
    continue_state     go to state 27
    expr               go to state 28
    l_expr             go to state 29
    logical_or_expr    go to state 30
    logical_and_expr   go to state 31
    eq_ne_expr         go to state 32
    compare_expr       go to state 33
    add_sub_expr       go to state 34
    math_expr          go to state 35
    minus_expr         go to state 36
    in_de_expr         go to state 37
    pri_expr           go to state 38
    array_literal      go to state 39


State 1

   64 pri_expr: INT_LITERAL .

    $default  reduce using rule 64 (pri_expr)


State 2

   65 pri_expr: DOUBLE_LITERAL .

    $default  reduce using rule 65 (pri_expr)


State 3

   66 pri_expr: STRING_LITERAL .

    $default  reduce using rule 66 (pri_expr)


State 4

   38 l_expr: IDENTIFIER .
   68 pri_expr: IDENTIFIER . LP argv_list RP
   69         | IDENTIFIER . LP RP
   73         | IDENTIFIER .

    LP  shift, and go to state 40

    LB        reduce using rule 38 (l_expr)
    ASSIGN    reduce using rule 38 (l_expr)
    DOT       reduce using rule 38 (l_expr)
    $default  reduce using rule 73 (pri_expr)


State 5

    5 func_def: FUNCTION . IDENTIFIER LP para_list RP block
    6         | FUNCTION . IDENTIFIER LP RP block

    IDENTIFIER  shift, and go to state 41


State 6

   21 if_state: IF . LP condition RP block
   22         | IF . LP condition RP block elif
   23         | IF . LP condition RP block ELSE block
   24         | IF . LP condition RP block elif ELSE block

    LP  shift, and go to state 42


State 7

   26 while_state: WHILE . LP condition RP block

    LP  shift, and go to state 43


State 8

   25 for_state: FOR . LP expr SEMICOLON condition SEMICOLON expr RP block

    LP  shift, and go to state 44


State 9

   27 return_state: RETURN . expr SEMICOLON

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    expr              go to state 45
    l_expr            go to state 29
    logical_or_expr   go to state 30
    logical_and_expr  go to state 31
    eq_ne_expr        go to state 32
    compare_expr      go to state 33
    add_sub_expr      go to state 34
    math_expr         go to state 35
    minus_expr        go to state 36
    in_de_expr        go to state 37
    pri_expr          go to state 38
    array_literal     go to state 39


State 10

   29 continue_state: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 46


State 11

   28 break_state: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 47


State 12

   74 pri_expr: NULL_T .

    $default  reduce using rule 74 (pri_expr)


State 13

   75 pri_expr: TRUE_T .

    $default  reduce using rule 75 (pri_expr)


State 14

   76 pri_expr: FALSE_T .

    $default  reduce using rule 76 (pri_expr)


State 15

   72 pri_expr: LP . expr RP

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    expr              go to state 48
    l_expr            go to state 29
    logical_or_expr   go to state 30
    logical_and_expr  go to state 31
    eq_ne_expr        go to state 32
    compare_expr      go to state 33
    add_sub_expr      go to state 34
    math_expr         go to state 35
    minus_expr        go to state 36
    in_de_expr        go to state 37
    pri_expr          go to state 38
    array_literal     go to state 39


State 16

   77 array_literal: LC . expr_list RC
   78              | LC . expr_list COMMA RC

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    $default  reduce using rule 18 (expr_list)

    expr_list         go to state 49
    expr              go to state 50
    l_expr            go to state 29
    logical_or_expr   go to state 30
    logical_and_expr  go to state 31
    eq_ne_expr        go to state 32
    compare_expr      go to state 33
    add_sub_expr      go to state 34
    math_expr         go to state 35
    minus_expr        go to state 36
    in_de_expr        go to state 37
    pri_expr          go to state 38
    array_literal     go to state 39


State 17

   60 minus_expr: SUB . pri_expr

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16

    l_expr         go to state 51
    pri_expr       go to state 52
    array_literal  go to state 39


State 18

    0 $accept: script . $end
    2 script: script . func_def_or_state

    $end            shift, and go to state 53
    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    FUNCTION        shift, and go to state 5
    IF              shift, and go to state 6
    WHILE           shift, and go to state 7
    FOR             shift, and go to state 8
    RETURN          shift, and go to state 9
    CONTINUE        shift, and go to state 10
    BREAK           shift, and go to state 11
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    func_def_or_state  go to state 54
    func_def           go to state 20
    state              go to state 21
    if_state           go to state 22
    for_state          go to state 23
    while_state        go to state 24
    return_state       go to state 25
    break_state        go to state 26
    continue_state     go to state 27
    expr               go to state 28
    l_expr             go to state 29
    logical_or_expr    go to state 30
    logical_and_expr   go to state 31
    eq_ne_expr         go to state 32
    compare_expr       go to state 33
    add_sub_expr       go to state 34
    math_expr          go to state 35
    minus_expr         go to state 36
    in_de_expr         go to state 37
    pri_expr           go to state 38
    array_literal      go to state 39


State 19

    1 script: func_def_or_state .

    $default  reduce using rule 1 (script)


State 20

    3 func_def_or_state: func_def .

    $default  reduce using rule 3 (func_def_or_state)


State 21

    4 func_def_or_state: state .

    $default  reduce using rule 4 (func_def_or_state)


State 22

    8 state: if_state .

    $default  reduce using rule 8 (state)


State 23

    9 state: for_state .

    $default  reduce using rule 9 (state)


State 24

   10 state: while_state .

    $default  reduce using rule 10 (state)


State 25

   11 state: return_state .

    $default  reduce using rule 11 (state)


State 26

   12 state: break_state .

    $default  reduce using rule 12 (state)


State 27

   13 state: continue_state .

    $default  reduce using rule 13 (state)


State 28

    7 state: expr . SEMICOLON

    SEMICOLON  shift, and go to state 55


State 29

   32 expr: l_expr . ASSIGN expr
   39 l_expr: l_expr . LB expr RB
   70 pri_expr: l_expr . DOT IDENTIFIER LP argv_list RP
   71         | l_expr . DOT IDENTIFIER LP RP

    LB      shift, and go to state 56
    ASSIGN  shift, and go to state 57
    DOT     shift, and go to state 58


State 30

   33 expr: logical_or_expr .
   41 logical_or_expr: logical_or_expr . LOGIC_OR logical_and_expr

    LOGIC_OR  shift, and go to state 59

    $default  reduce using rule 33 (expr)


State 31

   40 logical_or_expr: logical_and_expr .
   43 logical_and_expr: logical_and_expr . LOGIC_AND eq_ne_expr

    LOGIC_AND  shift, and go to state 60

    $default  reduce using rule 40 (logical_or_expr)


State 32

   42 logical_and_expr: eq_ne_expr .
   45 eq_ne_expr: eq_ne_expr . EQ compare_expr
   46           | eq_ne_expr . NE compare_expr

    EQ  shift, and go to state 61
    NE  shift, and go to state 62

    $default  reduce using rule 42 (logical_and_expr)


State 33

   44 eq_ne_expr: compare_expr .
   48 compare_expr: compare_expr . GT add_sub_expr
   49             | compare_expr . GE add_sub_expr
   50             | compare_expr . LT add_sub_expr
   51             | compare_expr . LE add_sub_expr

    GE  shift, and go to state 63
    LE  shift, and go to state 64
    GT  shift, and go to state 65
    LT  shift, and go to state 66

    $default  reduce using rule 44 (eq_ne_expr)


State 34

   47 compare_expr: add_sub_expr .
   53 add_sub_expr: add_sub_expr . ADD math_expr
   54             | add_sub_expr . SUB math_expr

    ADD  shift, and go to state 67
    SUB  shift, and go to state 68

    $default  reduce using rule 47 (compare_expr)


State 35

   52 add_sub_expr: math_expr .
   56 math_expr: math_expr . MUL minus_expr
   57          | math_expr . DIV minus_expr
   58          | math_expr . MOD minus_expr

    MUL  shift, and go to state 69
    DIV  shift, and go to state 70
    MOD  shift, and go to state 71

    $default  reduce using rule 52 (add_sub_expr)


State 36

   55 math_expr: minus_expr .

    $default  reduce using rule 55 (math_expr)


State 37

   59 minus_expr: in_de_expr .

    $default  reduce using rule 59 (minus_expr)


State 38

   61 in_de_expr: pri_expr .
   62           | pri_expr . INC
   63           | pri_expr . DEC

    INC  shift, and go to state 72
    DEC  shift, and go to state 73

    $default  reduce using rule 61 (in_de_expr)


State 39

   67 pri_expr: array_literal .

    $default  reduce using rule 67 (pri_expr)


State 40

   68 pri_expr: IDENTIFIER LP . argv_list RP
   69         | IDENTIFIER LP . RP

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    RP              shift, and go to state 74
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    expr              go to state 75
    l_expr            go to state 29
    logical_or_expr   go to state 30
    logical_and_expr  go to state 31
    eq_ne_expr        go to state 32
    compare_expr      go to state 33
    add_sub_expr      go to state 34
    math_expr         go to state 35
    minus_expr        go to state 36
    in_de_expr        go to state 37
    pri_expr          go to state 38
    array_literal     go to state 39
    argv_list         go to state 76


State 41

    5 func_def: FUNCTION IDENTIFIER . LP para_list RP block
    6         | FUNCTION IDENTIFIER . LP RP block

    LP  shift, and go to state 77


State 42

   21 if_state: IF LP . condition RP block
   22         | IF LP . condition RP block elif
   23         | IF LP . condition RP block ELSE block
   24         | IF LP . condition RP block elif ELSE block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    $default  reduce using rule 18 (expr_list)

    expr_list         go to state 78
    expr              go to state 79
    condition         go to state 80
    l_expr            go to state 29
    logical_or_expr   go to state 30
    logical_and_expr  go to state 31
    eq_ne_expr        go to state 32
    compare_expr      go to state 33
    add_sub_expr      go to state 34
    math_expr         go to state 35
    minus_expr        go to state 36
    in_de_expr        go to state 37
    pri_expr          go to state 38
    array_literal     go to state 39


State 43

   26 while_state: WHILE LP . condition RP block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    $default  reduce using rule 18 (expr_list)

    expr_list         go to state 78
    expr              go to state 79
    condition         go to state 81
    l_expr            go to state 29
    logical_or_expr   go to state 30
    logical_and_expr  go to state 31
    eq_ne_expr        go to state 32
    compare_expr      go to state 33
    add_sub_expr      go to state 34
    math_expr         go to state 35
    minus_expr        go to state 36
    in_de_expr        go to state 37
    pri_expr          go to state 38
    array_literal     go to state 39


State 44

   25 for_state: FOR LP . expr SEMICOLON condition SEMICOLON expr RP block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    expr              go to state 82
    l_expr            go to state 29
    logical_or_expr   go to state 30
    logical_and_expr  go to state 31
    eq_ne_expr        go to state 32
    compare_expr      go to state 33
    add_sub_expr      go to state 34
    math_expr         go to state 35
    minus_expr        go to state 36
    in_de_expr        go to state 37
    pri_expr          go to state 38
    array_literal     go to state 39


State 45

   27 return_state: RETURN expr . SEMICOLON

    SEMICOLON  shift, and go to state 83


State 46

   29 continue_state: CONTINUE SEMICOLON .

    $default  reduce using rule 29 (continue_state)


State 47

   28 break_state: BREAK SEMICOLON .

    $default  reduce using rule 28 (break_state)


State 48

   72 pri_expr: LP expr . RP

    RP  shift, and go to state 84


State 49

   20 expr_list: expr_list . COMMA expr
   77 array_literal: LC expr_list . RC
   78              | LC expr_list . COMMA RC

    RC     shift, and go to state 85
    COMMA  shift, and go to state 86


State 50

   19 expr_list: expr .

    $default  reduce using rule 19 (expr_list)


State 51

   39 l_expr: l_expr . LB expr RB
   70 pri_expr: l_expr . DOT IDENTIFIER LP argv_list RP
   71         | l_expr . DOT IDENTIFIER LP RP

    LB   shift, and go to state 56
    DOT  shift, and go to state 58


State 52

   60 minus_expr: SUB pri_expr .

    $default  reduce using rule 60 (minus_expr)


State 53

    0 $accept: script $end .

    $default  accept


State 54

    2 script: script func_def_or_state .

    $default  reduce using rule 2 (script)


State 55

    7 state: expr SEMICOLON .

    $default  reduce using rule 7 (state)


State 56

   39 l_expr: l_expr LB . expr RB

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    expr              go to state 87
    l_expr            go to state 29
    logical_or_expr   go to state 30
    logical_and_expr  go to state 31
    eq_ne_expr        go to state 32
    compare_expr      go to state 33
    add_sub_expr      go to state 34
    math_expr         go to state 35
    minus_expr        go to state 36
    in_de_expr        go to state 37
    pri_expr          go to state 38
    array_literal     go to state 39


State 57

   32 expr: l_expr ASSIGN . expr

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    expr              go to state 88
    l_expr            go to state 29
    logical_or_expr   go to state 30
    logical_and_expr  go to state 31
    eq_ne_expr        go to state 32
    compare_expr      go to state 33
    add_sub_expr      go to state 34
    math_expr         go to state 35
    minus_expr        go to state 36
    in_de_expr        go to state 37
    pri_expr          go to state 38
    array_literal     go to state 39


State 58

   70 pri_expr: l_expr DOT . IDENTIFIER LP argv_list RP
   71         | l_expr DOT . IDENTIFIER LP RP

    IDENTIFIER  shift, and go to state 89


State 59

   41 logical_or_expr: logical_or_expr LOGIC_OR . logical_and_expr

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    l_expr            go to state 51
    logical_and_expr  go to state 90
    eq_ne_expr        go to state 32
    compare_expr      go to state 33
    add_sub_expr      go to state 34
    math_expr         go to state 35
    minus_expr        go to state 36
    in_de_expr        go to state 37
    pri_expr          go to state 38
    array_literal     go to state 39


State 60

   43 logical_and_expr: logical_and_expr LOGIC_AND . eq_ne_expr

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    l_expr         go to state 51
    eq_ne_expr     go to state 91
    compare_expr   go to state 33
    add_sub_expr   go to state 34
    math_expr      go to state 35
    minus_expr     go to state 36
    in_de_expr     go to state 37
    pri_expr       go to state 38
    array_literal  go to state 39


State 61

   45 eq_ne_expr: eq_ne_expr EQ . compare_expr

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    l_expr         go to state 51
    compare_expr   go to state 92
    add_sub_expr   go to state 34
    math_expr      go to state 35
    minus_expr     go to state 36
    in_de_expr     go to state 37
    pri_expr       go to state 38
    array_literal  go to state 39


State 62

   46 eq_ne_expr: eq_ne_expr NE . compare_expr

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    l_expr         go to state 51
    compare_expr   go to state 93
    add_sub_expr   go to state 34
    math_expr      go to state 35
    minus_expr     go to state 36
    in_de_expr     go to state 37
    pri_expr       go to state 38
    array_literal  go to state 39


State 63

   49 compare_expr: compare_expr GE . add_sub_expr

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    l_expr         go to state 51
    add_sub_expr   go to state 94
    math_expr      go to state 35
    minus_expr     go to state 36
    in_de_expr     go to state 37
    pri_expr       go to state 38
    array_literal  go to state 39


State 64

   51 compare_expr: compare_expr LE . add_sub_expr

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    l_expr         go to state 51
    add_sub_expr   go to state 95
    math_expr      go to state 35
    minus_expr     go to state 36
    in_de_expr     go to state 37
    pri_expr       go to state 38
    array_literal  go to state 39


State 65

   48 compare_expr: compare_expr GT . add_sub_expr

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    l_expr         go to state 51
    add_sub_expr   go to state 96
    math_expr      go to state 35
    minus_expr     go to state 36
    in_de_expr     go to state 37
    pri_expr       go to state 38
    array_literal  go to state 39


State 66

   50 compare_expr: compare_expr LT . add_sub_expr

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    l_expr         go to state 51
    add_sub_expr   go to state 97
    math_expr      go to state 35
    minus_expr     go to state 36
    in_de_expr     go to state 37
    pri_expr       go to state 38
    array_literal  go to state 39


State 67

   53 add_sub_expr: add_sub_expr ADD . math_expr

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    l_expr         go to state 51
    math_expr      go to state 98
    minus_expr     go to state 36
    in_de_expr     go to state 37
    pri_expr       go to state 38
    array_literal  go to state 39


State 68

   54 add_sub_expr: add_sub_expr SUB . math_expr

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    l_expr         go to state 51
    math_expr      go to state 99
    minus_expr     go to state 36
    in_de_expr     go to state 37
    pri_expr       go to state 38
    array_literal  go to state 39


State 69

   56 math_expr: math_expr MUL . minus_expr

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    l_expr         go to state 51
    minus_expr     go to state 100
    in_de_expr     go to state 37
    pri_expr       go to state 38
    array_literal  go to state 39


State 70

   57 math_expr: math_expr DIV . minus_expr

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    l_expr         go to state 51
    minus_expr     go to state 101
    in_de_expr     go to state 37
    pri_expr       go to state 38
    array_literal  go to state 39


State 71

   58 math_expr: math_expr MOD . minus_expr

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    l_expr         go to state 51
    minus_expr     go to state 102
    in_de_expr     go to state 37
    pri_expr       go to state 38
    array_literal  go to state 39


State 72

   62 in_de_expr: pri_expr INC .

    $default  reduce using rule 62 (in_de_expr)


State 73

   63 in_de_expr: pri_expr DEC .

    $default  reduce using rule 63 (in_de_expr)


State 74

   69 pri_expr: IDENTIFIER LP RP .

    $default  reduce using rule 69 (pri_expr)


State 75

   79 argv_list: expr .

    $default  reduce using rule 79 (argv_list)


State 76

   68 pri_expr: IDENTIFIER LP argv_list . RP
   80 argv_list: argv_list . COMMA expr

    RP     shift, and go to state 103
    COMMA  shift, and go to state 104


State 77

    5 func_def: FUNCTION IDENTIFIER LP . para_list RP block
    6         | FUNCTION IDENTIFIER LP . RP block

    IDENTIFIER  shift, and go to state 105
    RP          shift, and go to state 106

    para_list  go to state 107


State 78

   20 expr_list: expr_list . COMMA expr
   35 condition: expr_list . COMMA expr

    COMMA  shift, and go to state 108


State 79

   19 expr_list: expr .
   34 condition: expr .

    COMMA     reduce using rule 19 (expr_list)
    $default  reduce using rule 34 (condition)


State 80

   21 if_state: IF LP condition . RP block
   22         | IF LP condition . RP block elif
   23         | IF LP condition . RP block ELSE block
   24         | IF LP condition . RP block elif ELSE block

    RP  shift, and go to state 109


State 81

   26 while_state: WHILE LP condition . RP block

    RP  shift, and go to state 110


State 82

   25 for_state: FOR LP expr . SEMICOLON condition SEMICOLON expr RP block

    SEMICOLON  shift, and go to state 111


State 83

   27 return_state: RETURN expr SEMICOLON .

    $default  reduce using rule 27 (return_state)


State 84

   72 pri_expr: LP expr RP .

    $default  reduce using rule 72 (pri_expr)


State 85

   77 array_literal: LC expr_list RC .

    $default  reduce using rule 77 (array_literal)


State 86

   20 expr_list: expr_list COMMA . expr
   78 array_literal: LC expr_list COMMA . RC

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    RC              shift, and go to state 112
    SUB             shift, and go to state 17

    expr              go to state 113
    l_expr            go to state 29
    logical_or_expr   go to state 30
    logical_and_expr  go to state 31
    eq_ne_expr        go to state 32
    compare_expr      go to state 33
    add_sub_expr      go to state 34
    math_expr         go to state 35
    minus_expr        go to state 36
    in_de_expr        go to state 37
    pri_expr          go to state 38
    array_literal     go to state 39


State 87

   39 l_expr: l_expr LB expr . RB

    RB  shift, and go to state 114


State 88

   32 expr: l_expr ASSIGN expr .

    $default  reduce using rule 32 (expr)


State 89

   70 pri_expr: l_expr DOT IDENTIFIER . LP argv_list RP
   71         | l_expr DOT IDENTIFIER . LP RP

    LP  shift, and go to state 115


State 90

   41 logical_or_expr: logical_or_expr LOGIC_OR logical_and_expr .
   43 logical_and_expr: logical_and_expr . LOGIC_AND eq_ne_expr

    LOGIC_AND  shift, and go to state 60

    $default  reduce using rule 41 (logical_or_expr)


State 91

   43 logical_and_expr: logical_and_expr LOGIC_AND eq_ne_expr .
   45 eq_ne_expr: eq_ne_expr . EQ compare_expr
   46           | eq_ne_expr . NE compare_expr

    EQ  shift, and go to state 61
    NE  shift, and go to state 62

    $default  reduce using rule 43 (logical_and_expr)


State 92

   45 eq_ne_expr: eq_ne_expr EQ compare_expr .
   48 compare_expr: compare_expr . GT add_sub_expr
   49             | compare_expr . GE add_sub_expr
   50             | compare_expr . LT add_sub_expr
   51             | compare_expr . LE add_sub_expr

    GE  shift, and go to state 63
    LE  shift, and go to state 64
    GT  shift, and go to state 65
    LT  shift, and go to state 66

    $default  reduce using rule 45 (eq_ne_expr)


State 93

   46 eq_ne_expr: eq_ne_expr NE compare_expr .
   48 compare_expr: compare_expr . GT add_sub_expr
   49             | compare_expr . GE add_sub_expr
   50             | compare_expr . LT add_sub_expr
   51             | compare_expr . LE add_sub_expr

    GE  shift, and go to state 63
    LE  shift, and go to state 64
    GT  shift, and go to state 65
    LT  shift, and go to state 66

    $default  reduce using rule 46 (eq_ne_expr)


State 94

   49 compare_expr: compare_expr GE add_sub_expr .
   53 add_sub_expr: add_sub_expr . ADD math_expr
   54             | add_sub_expr . SUB math_expr

    ADD  shift, and go to state 67
    SUB  shift, and go to state 68

    $default  reduce using rule 49 (compare_expr)


State 95

   51 compare_expr: compare_expr LE add_sub_expr .
   53 add_sub_expr: add_sub_expr . ADD math_expr
   54             | add_sub_expr . SUB math_expr

    ADD  shift, and go to state 67
    SUB  shift, and go to state 68

    $default  reduce using rule 51 (compare_expr)


State 96

   48 compare_expr: compare_expr GT add_sub_expr .
   53 add_sub_expr: add_sub_expr . ADD math_expr
   54             | add_sub_expr . SUB math_expr

    ADD  shift, and go to state 67
    SUB  shift, and go to state 68

    $default  reduce using rule 48 (compare_expr)


State 97

   50 compare_expr: compare_expr LT add_sub_expr .
   53 add_sub_expr: add_sub_expr . ADD math_expr
   54             | add_sub_expr . SUB math_expr

    ADD  shift, and go to state 67
    SUB  shift, and go to state 68

    $default  reduce using rule 50 (compare_expr)


State 98

   53 add_sub_expr: add_sub_expr ADD math_expr .
   56 math_expr: math_expr . MUL minus_expr
   57          | math_expr . DIV minus_expr
   58          | math_expr . MOD minus_expr

    MUL  shift, and go to state 69
    DIV  shift, and go to state 70
    MOD  shift, and go to state 71

    $default  reduce using rule 53 (add_sub_expr)


State 99

   54 add_sub_expr: add_sub_expr SUB math_expr .
   56 math_expr: math_expr . MUL minus_expr
   57          | math_expr . DIV minus_expr
   58          | math_expr . MOD minus_expr

    MUL  shift, and go to state 69
    DIV  shift, and go to state 70
    MOD  shift, and go to state 71

    $default  reduce using rule 54 (add_sub_expr)


State 100

   56 math_expr: math_expr MUL minus_expr .

    $default  reduce using rule 56 (math_expr)


State 101

   57 math_expr: math_expr DIV minus_expr .

    $default  reduce using rule 57 (math_expr)


State 102

   58 math_expr: math_expr MOD minus_expr .

    $default  reduce using rule 58 (math_expr)


State 103

   68 pri_expr: IDENTIFIER LP argv_list RP .

    $default  reduce using rule 68 (pri_expr)


State 104

   80 argv_list: argv_list COMMA . expr

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    expr              go to state 116
    l_expr            go to state 29
    logical_or_expr   go to state 30
    logical_and_expr  go to state 31
    eq_ne_expr        go to state 32
    compare_expr      go to state 33
    add_sub_expr      go to state 34
    math_expr         go to state 35
    minus_expr        go to state 36
    in_de_expr        go to state 37
    pri_expr          go to state 38
    array_literal     go to state 39


State 105

   14 para_list: IDENTIFIER .

    $default  reduce using rule 14 (para_list)


State 106

    6 func_def: FUNCTION IDENTIFIER LP RP . block

    LC  shift, and go to state 117

    block  go to state 118


State 107

    5 func_def: FUNCTION IDENTIFIER LP para_list . RP block
   15 para_list: para_list . COMMA IDENTIFIER

    RP     shift, and go to state 119
    COMMA  shift, and go to state 120


State 108

   20 expr_list: expr_list COMMA . expr
   35 condition: expr_list COMMA . expr

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    expr              go to state 121
    l_expr            go to state 29
    logical_or_expr   go to state 30
    logical_and_expr  go to state 31
    eq_ne_expr        go to state 32
    compare_expr      go to state 33
    add_sub_expr      go to state 34
    math_expr         go to state 35
    minus_expr        go to state 36
    in_de_expr        go to state 37
    pri_expr          go to state 38
    array_literal     go to state 39


State 109

   21 if_state: IF LP condition RP . block
   22         | IF LP condition RP . block elif
   23         | IF LP condition RP . block ELSE block
   24         | IF LP condition RP . block elif ELSE block

    LC  shift, and go to state 117

    block  go to state 122


State 110

   26 while_state: WHILE LP condition RP . block

    LC  shift, and go to state 117

    block  go to state 123


State 111

   25 for_state: FOR LP expr SEMICOLON . condition SEMICOLON expr RP block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    $default  reduce using rule 18 (expr_list)

    expr_list         go to state 78
    expr              go to state 79
    condition         go to state 124
    l_expr            go to state 29
    logical_or_expr   go to state 30
    logical_and_expr  go to state 31
    eq_ne_expr        go to state 32
    compare_expr      go to state 33
    add_sub_expr      go to state 34
    math_expr         go to state 35
    minus_expr        go to state 36
    in_de_expr        go to state 37
    pri_expr          go to state 38
    array_literal     go to state 39


State 112

   78 array_literal: LC expr_list COMMA RC .

    $default  reduce using rule 78 (array_literal)


State 113

   20 expr_list: expr_list COMMA expr .

    $default  reduce using rule 20 (expr_list)


State 114

   39 l_expr: l_expr LB expr RB .

    $default  reduce using rule 39 (l_expr)


State 115

   70 pri_expr: l_expr DOT IDENTIFIER LP . argv_list RP
   71         | l_expr DOT IDENTIFIER LP . RP

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    RP              shift, and go to state 125
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    expr              go to state 75
    l_expr            go to state 29
    logical_or_expr   go to state 30
    logical_and_expr  go to state 31
    eq_ne_expr        go to state 32
    compare_expr      go to state 33
    add_sub_expr      go to state 34
    math_expr         go to state 35
    minus_expr        go to state 36
    in_de_expr        go to state 37
    pri_expr          go to state 38
    array_literal     go to state 39
    argv_list         go to state 126


State 116

   80 argv_list: argv_list COMMA expr .

    $default  reduce using rule 80 (argv_list)


State 117

   16 block: LC . state_list RC
   17      | LC . RC

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 6
    WHILE           shift, and go to state 7
    FOR             shift, and go to state 8
    RETURN          shift, and go to state 9
    CONTINUE        shift, and go to state 10
    BREAK           shift, and go to state 11
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    RC              shift, and go to state 127
    SUB             shift, and go to state 17

    state             go to state 128
    if_state          go to state 22
    for_state         go to state 23
    while_state       go to state 24
    return_state      go to state 25
    break_state       go to state 26
    continue_state    go to state 27
    state_list        go to state 129
    expr              go to state 28
    l_expr            go to state 29
    logical_or_expr   go to state 30
    logical_and_expr  go to state 31
    eq_ne_expr        go to state 32
    compare_expr      go to state 33
    add_sub_expr      go to state 34
    math_expr         go to state 35
    minus_expr        go to state 36
    in_de_expr        go to state 37
    pri_expr          go to state 38
    array_literal     go to state 39


State 118

    6 func_def: FUNCTION IDENTIFIER LP RP block .

    $default  reduce using rule 6 (func_def)


State 119

    5 func_def: FUNCTION IDENTIFIER LP para_list RP . block

    LC  shift, and go to state 117

    block  go to state 130


State 120

   15 para_list: para_list COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 131


State 121

   20 expr_list: expr_list COMMA expr .
   35 condition: expr_list COMMA expr .

    COMMA     reduce using rule 20 (expr_list)
    $default  reduce using rule 35 (condition)


State 122

   21 if_state: IF LP condition RP block .
   22         | IF LP condition RP block . elif
   23         | IF LP condition RP block . ELSE block
   24         | IF LP condition RP block . elif ELSE block

    ELIF  shift, and go to state 132
    ELSE  shift, and go to state 133

    $default  reduce using rule 21 (if_state)

    elif  go to state 134


State 123

   26 while_state: WHILE LP condition RP block .

    $default  reduce using rule 26 (while_state)


State 124

   25 for_state: FOR LP expr SEMICOLON condition . SEMICOLON expr RP block

    SEMICOLON  shift, and go to state 135


State 125

   71 pri_expr: l_expr DOT IDENTIFIER LP RP .

    $default  reduce using rule 71 (pri_expr)


State 126

   70 pri_expr: l_expr DOT IDENTIFIER LP argv_list . RP
   80 argv_list: argv_list . COMMA expr

    RP     shift, and go to state 136
    COMMA  shift, and go to state 104


State 127

   17 block: LC RC .

    $default  reduce using rule 17 (block)


State 128

   30 state_list: state .

    $default  reduce using rule 30 (state_list)


State 129

   16 block: LC state_list . RC
   31 state_list: state_list . state

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 6
    WHILE           shift, and go to state 7
    FOR             shift, and go to state 8
    RETURN          shift, and go to state 9
    CONTINUE        shift, and go to state 10
    BREAK           shift, and go to state 11
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    RC              shift, and go to state 137
    SUB             shift, and go to state 17

    state             go to state 138
    if_state          go to state 22
    for_state         go to state 23
    while_state       go to state 24
    return_state      go to state 25
    break_state       go to state 26
    continue_state    go to state 27
    expr              go to state 28
    l_expr            go to state 29
    logical_or_expr   go to state 30
    logical_and_expr  go to state 31
    eq_ne_expr        go to state 32
    compare_expr      go to state 33
    add_sub_expr      go to state 34
    math_expr         go to state 35
    minus_expr        go to state 36
    in_de_expr        go to state 37
    pri_expr          go to state 38
    array_literal     go to state 39


State 130

    5 func_def: FUNCTION IDENTIFIER LP para_list RP block .

    $default  reduce using rule 5 (func_def)


State 131

   15 para_list: para_list COMMA IDENTIFIER .

    $default  reduce using rule 15 (para_list)


State 132

   36 elif: ELIF . LP condition RP block

    LP  shift, and go to state 139


State 133

   23 if_state: IF LP condition RP block ELSE . block

    LC  shift, and go to state 117

    block  go to state 140


State 134

   22 if_state: IF LP condition RP block elif .
   24         | IF LP condition RP block elif . ELSE block
   37 elif: elif . ELIF LP condition RP block

    ELIF  shift, and go to state 141
    ELSE  shift, and go to state 142

    $default  reduce using rule 22 (if_state)


State 135

   25 for_state: FOR LP expr SEMICOLON condition SEMICOLON . expr RP block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    expr              go to state 143
    l_expr            go to state 29
    logical_or_expr   go to state 30
    logical_and_expr  go to state 31
    eq_ne_expr        go to state 32
    compare_expr      go to state 33
    add_sub_expr      go to state 34
    math_expr         go to state 35
    minus_expr        go to state 36
    in_de_expr        go to state 37
    pri_expr          go to state 38
    array_literal     go to state 39


State 136

   70 pri_expr: l_expr DOT IDENTIFIER LP argv_list RP .

    $default  reduce using rule 70 (pri_expr)


State 137

   16 block: LC state_list RC .

    $default  reduce using rule 16 (block)


State 138

   31 state_list: state_list state .

    $default  reduce using rule 31 (state_list)


State 139

   36 elif: ELIF LP . condition RP block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    $default  reduce using rule 18 (expr_list)

    expr_list         go to state 78
    expr              go to state 79
    condition         go to state 144
    l_expr            go to state 29
    logical_or_expr   go to state 30
    logical_and_expr  go to state 31
    eq_ne_expr        go to state 32
    compare_expr      go to state 33
    add_sub_expr      go to state 34
    math_expr         go to state 35
    minus_expr        go to state 36
    in_de_expr        go to state 37
    pri_expr          go to state 38
    array_literal     go to state 39


State 140

   23 if_state: IF LP condition RP block ELSE block .

    $default  reduce using rule 23 (if_state)


State 141

   37 elif: elif ELIF . LP condition RP block

    LP  shift, and go to state 145


State 142

   24 if_state: IF LP condition RP block elif ELSE . block

    LC  shift, and go to state 117

    block  go to state 146


State 143

   25 for_state: FOR LP expr SEMICOLON condition SEMICOLON expr . RP block

    RP  shift, and go to state 147


State 144

   36 elif: ELIF LP condition . RP block

    RP  shift, and go to state 148


State 145

   37 elif: elif ELIF LP . condition RP block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    NULL_T          shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    LP              shift, and go to state 15
    LC              shift, and go to state 16
    SUB             shift, and go to state 17

    $default  reduce using rule 18 (expr_list)

    expr_list         go to state 78
    expr              go to state 79
    condition         go to state 149
    l_expr            go to state 29
    logical_or_expr   go to state 30
    logical_and_expr  go to state 31
    eq_ne_expr        go to state 32
    compare_expr      go to state 33
    add_sub_expr      go to state 34
    math_expr         go to state 35
    minus_expr        go to state 36
    in_de_expr        go to state 37
    pri_expr          go to state 38
    array_literal     go to state 39


State 146

   24 if_state: IF LP condition RP block elif ELSE block .

    $default  reduce using rule 24 (if_state)


State 147

   25 for_state: FOR LP expr SEMICOLON condition SEMICOLON expr RP . block

    LC  shift, and go to state 117

    block  go to state 150


State 148

   36 elif: ELIF LP condition RP . block

    LC  shift, and go to state 117

    block  go to state 151


State 149

   37 elif: elif ELIF LP condition . RP block

    RP  shift, and go to state 152


State 150

   25 for_state: FOR LP expr SEMICOLON condition SEMICOLON expr RP block .

    $default  reduce using rule 25 (for_state)


State 151

   36 elif: ELIF LP condition RP block .

    $default  reduce using rule 36 (elif)


State 152

   37 elif: elif ELIF LP condition RP . block

    LC  shift, and go to state 117

    block  go to state 153


State 153

   37 elif: elif ELIF LP condition RP block .

    $default  reduce using rule 37 (elif)
